{"ast":null,"code":"import _regeneratorRuntime from\"/home/bbthorson/full-stack-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/bbthorson/full-stack-portal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import decodeJwt from'jwt-decode';export var isAuthenticated=function isAuthenticated(){var permissions=localStorage.getItem('permissions');if(!permissions){return false;}return permissions==='user'||permissions==='admin'?true:false;};/**\n * Login to backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */export var login=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(email,password){var formData,request,response,data,decodedToken;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!(email.length>0)||!(password.length>0))){_context.next=2;break;}throw new Error('Email or password was not provided');case 2:formData=new FormData();// OAuth2 expects form data, not JSON data\nformData.append('username',email);formData.append('password',password);request=new Request('/api/token',{method:'POST',body:formData});_context.next=8;return fetch(request);case 8:response=_context.sent;if(!(response.status===500)){_context.next=11;break;}throw new Error('Internal server error');case 11:_context.next=13;return response.json();case 13:data=_context.sent;if(!(response.status>400&&response.status<500)){_context.next=18;break;}if(!data.detail){_context.next=17;break;}throw data.detail;case 17:throw data;case 18:if('access_token'in data){decodedToken=decodeJwt(data['access_token']);localStorage.setItem('token',data['access_token']);localStorage.setItem('permissions',decodedToken.permissions);}return _context.abrupt(\"return\",data);case 20:case\"end\":return _context.stop();}}},_callee);}));return function login(_x,_x2){return _ref.apply(this,arguments);};}();/**\n * Sign up via backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */export var signUp=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email,password,passwordConfirmation){var formData,request,response,data,decodedToken;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(email.length>0){_context2.next=2;break;}throw new Error('Email was not provided');case 2:if(password.length>0){_context2.next=4;break;}throw new Error('Password was not provided');case 4:if(passwordConfirmation.length>0){_context2.next=6;break;}throw new Error('Password confirmation was not provided');case 6:formData=new FormData();// OAuth2 expects form data, not JSON data\nformData.append('username',email);formData.append('password',password);request=new Request('/api/signup',{method:'POST',body:formData});_context2.next=12;return fetch(request);case 12:response=_context2.sent;if(!(response.status===500)){_context2.next=15;break;}throw new Error('Internal server error');case 15:_context2.next=17;return response.json();case 17:data=_context2.sent;if(!(response.status>400&&response.status<500)){_context2.next=22;break;}if(!data.detail){_context2.next=21;break;}throw data.detail;case 21:throw data;case 22:if('access_token'in data){decodedToken=decodeJwt(data['access_token']);localStorage.setItem('token',data['access_token']);localStorage.setItem('permissions',decodedToken.permissions);}return _context2.abrupt(\"return\",data);case 24:case\"end\":return _context2.stop();}}},_callee2);}));return function signUp(_x3,_x4,_x5){return _ref2.apply(this,arguments);};}();export var logout=function logout(){localStorage.removeItem('token');localStorage.removeItem('permissions');};","map":{"version":3,"sources":["/home/bbthorson/full-stack-portal/frontend/src/utils/auth.ts"],"names":["decodeJwt","isAuthenticated","permissions","localStorage","getItem","login","email","password","length","Error","formData","FormData","append","request","Request","method","body","fetch","response","status","json","data","detail","decodedToken","setItem","signUp","passwordConfirmation","logout","removeItem"],"mappings":"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","sourcesContent":["import decodeJwt from 'jwt-decode';\n\nexport const isAuthenticated = () => {\n  const permissions = localStorage.getItem('permissions');\n  if (!permissions) {\n    return false;\n  }\n  return permissions === 'user' || permissions === 'admin' ? true : false;\n};\n\n/**\n * Login to backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */\nexport const login = async (email: string, password: string) => {\n  // Assert email or password is not empty\n  if (!(email.length > 0) || !(password.length > 0)) {\n    throw new Error('Email or password was not provided');\n  }\n  const formData = new FormData();\n  // OAuth2 expects form data, not JSON data\n  formData.append('username', email);\n  formData.append('password', password);\n\n  const request = new Request('/api/token', {\n    method: 'POST',\n    body: formData,\n  });\n\n  const response = await fetch(request);\n\n  if (response.status === 500) {\n    throw new Error('Internal server error');\n  }\n\n  const data = await response.json();\n\n  if (response.status > 400 && response.status < 500) {\n    if (data.detail) {\n      throw data.detail;\n    }\n    throw data;\n  }\n\n  if ('access_token' in data) {\n    const decodedToken: any = decodeJwt(data['access_token']);\n    localStorage.setItem('token', data['access_token']);\n    localStorage.setItem('permissions', decodedToken.permissions);\n  }\n\n  return data;\n};\n\n/**\n * Sign up via backend and store JSON web token on success\n *\n * @param email\n * @param password\n * @returns JSON data containing access token on success\n * @throws Error on http errors or failed attempts\n */\nexport const signUp = async (\n  email: string,\n  password: string,\n  passwordConfirmation: string\n) => {\n  // Assert email or password or password confirmation is not empty\n  if (!(email.length > 0)) {\n    throw new Error('Email was not provided');\n  }\n  if (!(password.length > 0)) {\n    throw new Error('Password was not provided');\n  }\n  if (!(passwordConfirmation.length > 0)) {\n    throw new Error('Password confirmation was not provided');\n  }\n\n  const formData = new FormData();\n  // OAuth2 expects form data, not JSON data\n  formData.append('username', email);\n  formData.append('password', password);\n\n  const request = new Request('/api/signup', {\n    method: 'POST',\n    body: formData,\n  });\n\n  const response = await fetch(request);\n\n  if (response.status === 500) {\n    throw new Error('Internal server error');\n  }\n\n  const data = await response.json();\n  if (response.status > 400 && response.status < 500) {\n    if (data.detail) {\n      throw data.detail;\n    }\n    throw data;\n  }\n\n  if ('access_token' in data) {\n    const decodedToken: any = decodeJwt(data['access_token']);\n    localStorage.setItem('token', data['access_token']);\n    localStorage.setItem('permissions', decodedToken.permissions);\n  }\n\n  return data;\n};\n\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('permissions');\n};\n"]},"metadata":{},"sourceType":"module"}