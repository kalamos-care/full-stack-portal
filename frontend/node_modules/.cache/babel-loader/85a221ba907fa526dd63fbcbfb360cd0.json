{"ast":null,"code":"import decodeJwt from'jwt-decode';var authProvider={login:function login(_ref){var username=_ref.username,password=_ref.password;var formData=new FormData();formData.append('username',username);formData.append('password',password);var request=new Request('/api/token',{method:'POST',body:formData});return fetch(request).then(function(response){if(response.status<200||response.status>=300){throw new Error(response.statusText);}return response.json();}).then(function(_ref2){var access_token=_ref2.access_token;var decodedToken=decodeJwt(access_token);if(decodedToken.permissions!=='admin'){throw new Error('Forbidden');}localStorage.setItem('token',access_token);localStorage.setItem('permissions',decodedToken.permissions);});},logout:function logout(){localStorage.removeItem('token');localStorage.removeItem('permissions');return Promise.resolve();},checkError:function checkError(error){var status=error.status;if(status===401||status===403){localStorage.removeItem('token');return Promise.reject();}return Promise.resolve();},checkAuth:function checkAuth(){return localStorage.getItem('token')?Promise.resolve():Promise.reject();},getPermissions:function getPermissions(){var role=localStorage.getItem('permissions');return role?Promise.resolve(role):Promise.reject();// localStorage.getItem('token') ? Promise.resolve() : Promise.reject(),\n}};export default authProvider;","map":{"version":3,"sources":["/home/bbthorson/full-stack-portal/frontend/src/admin/authProvider.ts"],"names":["decodeJwt","authProvider","login","username","password","formData","FormData","append","request","Request","method","body","fetch","then","response","status","Error","statusText","json","access_token","decodedToken","permissions","localStorage","setItem","logout","removeItem","Promise","resolve","checkError","error","reject","checkAuth","getItem","getPermissions","role"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,YAAtB,CAOA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,KAAK,CAAE,oBAA2C,IAAxCC,CAAAA,QAAwC,MAAxCA,QAAwC,CAA9BC,QAA8B,MAA9BA,QAA8B,CAChD,GAAIC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,QAAJ,EAAf,CACAD,QAAQ,CAACE,MAAT,CAAgB,UAAhB,CAA4BJ,QAA5B,EACAE,QAAQ,CAACE,MAAT,CAAgB,UAAhB,CAA4BH,QAA5B,EACA,GAAMI,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,CAAY,YAAZ,CAA0B,CACxCC,MAAM,CAAE,MADgC,CAExCC,IAAI,CAAEN,QAFkC,CAA1B,CAAhB,CAIA,MAAOO,CAAAA,KAAK,CAACJ,OAAD,CAAL,CACJK,IADI,CACC,SAACC,QAAD,CAAc,CAClB,GAAIA,QAAQ,CAACC,MAAT,CAAkB,GAAlB,EAAyBD,QAAQ,CAACC,MAAT,EAAmB,GAAhD,CAAqD,CACnD,KAAM,IAAIC,CAAAA,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN,CACD,CACD,MAAOH,CAAAA,QAAQ,CAACI,IAAT,EAAP,CACD,CANI,EAOJL,IAPI,CAOC,eAAsB,IAAnBM,CAAAA,YAAmB,OAAnBA,YAAmB,CAC1B,GAAMC,CAAAA,YAAiB,CAAGpB,SAAS,CAACmB,YAAD,CAAnC,CACA,GAAIC,YAAY,CAACC,WAAb,GAA6B,OAAjC,CAA0C,CACxC,KAAM,IAAIL,CAAAA,KAAJ,CAAU,WAAV,CAAN,CACD,CACDM,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8BJ,YAA9B,EACAG,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAoCH,YAAY,CAACC,WAAjD,EACD,CAdI,CAAP,CAeD,CAxBkB,CAyBnBG,MAAM,CAAE,iBAAM,CACZF,YAAY,CAACG,UAAb,CAAwB,OAAxB,EACAH,YAAY,CAACG,UAAb,CAAwB,aAAxB,EACA,MAAOC,CAAAA,OAAO,CAACC,OAAR,EAAP,CACD,CA7BkB,CA8BnBC,UAAU,CAAE,oBAACC,KAAD,CAA+B,CACzC,GAAMd,CAAAA,MAAM,CAAGc,KAAK,CAACd,MAArB,CACA,GAAIA,MAAM,GAAK,GAAX,EAAkBA,MAAM,GAAK,GAAjC,CAAsC,CACpCO,YAAY,CAACG,UAAb,CAAwB,OAAxB,EACA,MAAOC,CAAAA,OAAO,CAACI,MAAR,EAAP,CACD,CACD,MAAOJ,CAAAA,OAAO,CAACC,OAAR,EAAP,CACD,CArCkB,CAsCnBI,SAAS,CAAE,2BACTT,CAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAAgCN,OAAO,CAACC,OAAR,EAAhC,CAAoDD,OAAO,CAACI,MAAR,EAD3C,EAtCQ,CAwCnBG,cAAc,CAAE,yBAAM,CACpB,GAAMC,CAAAA,IAAI,CAAGZ,YAAY,CAACU,OAAb,CAAqB,aAArB,CAAb,CACA,MAAOE,CAAAA,IAAI,CAAGR,OAAO,CAACC,OAAR,CAAgBO,IAAhB,CAAH,CAA2BR,OAAO,CAACI,MAAR,EAAtC,CACA;AACD,CA5CkB,CAArB,CA+CA,cAAe7B,CAAAA,YAAf","sourcesContent":["import decodeJwt from 'jwt-decode';\n\ntype loginFormType = {\n  username: string;\n  password: string;\n};\n\nconst authProvider = {\n  login: ({ username, password }: loginFormType) => {\n    let formData = new FormData();\n    formData.append('username', username);\n    formData.append('password', password);\n    const request = new Request('/api/token', {\n      method: 'POST',\n      body: formData,\n    });\n    return fetch(request)\n      .then((response) => {\n        if (response.status < 200 || response.status >= 300) {\n          throw new Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then(({ access_token }) => {\n        const decodedToken: any = decodeJwt(access_token);\n        if (decodedToken.permissions !== 'admin') {\n          throw new Error('Forbidden');\n        }\n        localStorage.setItem('token', access_token);\n        localStorage.setItem('permissions', decodedToken.permissions);\n      });\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('permissions');\n    return Promise.resolve();\n  },\n  checkError: (error: { status: number }) => {\n    const status = error.status;\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('token');\n      return Promise.reject();\n    }\n    return Promise.resolve();\n  },\n  checkAuth: () =>\n    localStorage.getItem('token') ? Promise.resolve() : Promise.reject(),\n  getPermissions: () => {\n    const role = localStorage.getItem('permissions');\n    return role ? Promise.resolve(role) : Promise.reject();\n    // localStorage.getItem('token') ? Promise.resolve() : Promise.reject(),\n  },\n};\n\nexport default authProvider;\n"]},"metadata":{},"sourceType":"module"}